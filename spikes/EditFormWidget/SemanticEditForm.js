
var the_model = {
  __metamodel : {
    propidx : 0
  }
}

var general_type_layout = {
  element_id : 'general_info_panel',
  tab_name : 'General',
  properties : [
    { label : 'Title', property_uri : 'dc.title' },
    { label : 'Description', property_uri : 'dc.description' }
  ]
}


function makeSIMEditor(editor_id) {
  // Get hold of the element
  root_element = $( editor_id )
  // Make the root element into a tabs control
  var tab_control = root_element.tabs();

  var general_info_panel = buildFormPanel(general_type_layout, root_element)

  // Add the generic details tab
  // Working from http://jqueryui.com/demos/tabs/#...immediately_select_a_just_added_tab
  // and http://blog.favrik.com/2009/08/11/dynamically-adding-jquery-tabs-round2/
  tab_control.tabs('add','#'+general_type_layout.element_id,general_type_layout.tab_name);

  //tab_control.tabs('add','#default',"Default Properties");
  //tab_control.tabs('add','#t1',"Default Properties1");
  //tab_control.tabs('add','#t2',"Default Properties2");
  //tab_control.tabs('add','#t3',"Default Properties3");
}


// Paint the template for the General Tab
function buildFormPanel(layout_definition, parent_element) {
  // the class here is copied from the page generated by a static tab. It may change with versions of JQuery I guess, so beware!
  var p = parent_element.append("<div id=\""+layout_definition.element_id+"\" class=\"ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide\"></div>");
  var new_table = $(document.createElement('table'));

  p.append(new_table);

  var parent_context = "";

  var i=0;

  for ( p in layout_definition.properties ) {

    // The definition of this property within the layout for this panel
    var propdef = layout_definition.properties[p];

    // The path to the property -in the model-. Initially, depth of 1, this is the property uri
    // Later on, ns:prop[4].ns:subprop  (subprop within the 4th instance of prop)
    var proppath = propdef.property_uri;

    // Make sure we have an object for this property in the model
    var property_model = the_model[proppath];

    // If this is the first time we have seen this property, create a new empty metamodel (Will contain info about the values and the binding to the controls)
    if ( property_model == null ) {
      property_model = {
        '__metamodel' : {
          property_value_containers : [],
          num_value_controls : 1
        },
        'values' : [
        ]
      }
      the_model[proppath] = property_model;
    }

    var new_ul = $(document.createElement('ul'));
    var new_td = $(document.createElement('td'));

    // Add a property to the control so it knows where the binding info in the metamodel is
    // new_ul.setAttribute('data-metamodel',property_model);
    // new_ul.get(0).setAttribute('data-metamodel','test');

    // Add this control (parent container) to the list of controls for this property
    property_model.__metamodel.property_value_containers.push(new_ul);

    new_td.append(new_ul);

    // Append a row to the table for every property. Each row will support muiltiple values if cardinality says so
    new_table.append($('<tr>').append("<td><label for=\""+base_property_path+"["+i+"]\">"+propdef.label+"</label></td>",new_td));

    // Work out the root of the property name (The path to an array of values)
    var base_property_path = parent_context+propdef.property_uri

    // For each property, see if there is a value in the model, if so, output an appropriate control
    // For(blah...)

    // Finally, output an empty control to act as a "Next" value (If permitted by cardinality rules)
    // keydown to capture deletes etc keypress for only sensible keys
    var cc = new_ul.append("<li><input id=\""+proppath+"["+i+"]\" data-proppath=\""+proppath+"\" data-property-idx=\""+i+"\" onkeyup=\"scalarUpdated(this);\" type=\"text\"/>[0]</li>")

    var input_control = cc.find('input');
    input_control.get(0).setAttribute("data-metamodel",property_model);

    // parent_element.append("</ul></td></tr>");
  }

  parent_element.append("</table>");

  // var data = $('<div id="'+tab_id+'"></div>').append(tab_content);
  // this.tabs.append(data).tabs('add', '#' + tab_id, tab_name);
  // this.tabs.tabs('select', '#' + tab_id);


}

function scalarUpdated(control) {
  // alert("updateModel "+control.dataset["data-property-path"]);
  var data_property_path = control.getAttribute("data-proppath");
  var metamodel = the_model[data_property_path];
  var control_index = parseInt(control.getAttribute('data-property-idx'));

  console.log("scalarUpdated "+control_index);

  // console.log(metamodel);

  // alert("path:"+data_property_path+" metamodel:"+metamodel+" idx:"+control_index+" count:"+metamodel.__metamodel.property_value_containers.length+" value:"+control.value);

  if ( control_index >= metamodel.values.length ) {
    // We are setting a value on a property which has not been set before. Need to create a new entry in the values array
    var new_value_info = {
      value:"",
      __metamodel:{
        status:"new"
      }
    };
    metamodel.values.push(new_value_info);
  }

  var value_info = metamodel.values[control_index];

  value_info.value = control.value;

  console.log("scalarupdate - control index "+control_index+", len %d",metamodel.__metamodel.num_value_controls);

  // Have we typed in to the last control in the list? If so, append a new blank control for the user to use when adding another value.. IF cardinality > 1
  if ( control_index+1 == metamodel.__metamodel.num_value_controls ) {
    console.log("Add new control....")
    addScalarControl(metamodel, data_property_path);
  }
  else {
    console.log(""+control_index+"+1 != "+metamodel.__metamodel.num_value_controls+" do not add "+(control_index+1));
  }

  var prop_model_info = the_model[data_property_path]

  // console.log ( "After update property metamodel %o", metamodel.values);
  // Retrieve the model object from data_property_path - It should contain some metadata and an array of values
}

function addScalarControl(metamodel, proppath) {

  var i = metamodel.__metamodel.num_value_controls++;

  // For each panel where a control appears for this property...
  for ( idx in metamodel.__metamodel.property_value_containers ) {
    // Get hold of the container element for each occurence of this property on a layout
    var c = metamodel.__metamodel.property_value_containers[idx];
    c.append("<li><input id=\""+proppath+"["+i+"]\" data-proppath=\""+proppath+"\" data-property-idx=\""+i+"\" onkeyup=\"scalarUpdated(this);\" type=\"text\"/>["+i+"]</li>")
  }
}
